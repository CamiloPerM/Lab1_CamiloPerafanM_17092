/*
 * File:   Lab1.c
 * Author: Camilo Perafán Montoya
 *
 * Created on 22 de enero de 2020, 06:11 PM
 */

// PIC16F887 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#define _XTAL_FREQ 1000000

#include <xc.h>

//********************************************************************************************************
// Prototipos de Funciones
//********************************************************************************************************

void init (void);


//********************************************************************************************************
// Función Principal
//********************************************************************************************************

void main(void) {
    init(); // Llama a la función que configura las entradas y salidas del PIC
    
    unsigned int seg[] ={ // Configura los valores que se muestran en el display de 7 segmentos
        0X3F, // Representa el 0
        0X06, // Representa el 1
        0X5B, // Representa el 2
        0X4F, // Representa el 3
    };
    
    while(1){
    if (PORTAbits.RA6 == 1){ // Si el pushbutton ubicado en el Pin A6 se oprime haga lo siguinte
                             // Si no, mantenga todo en 0
        
            PORTAbits.RA0 = 1; // Prenda la LED ubicada en el pin A0
            PORTD = seg[3]; // Muestre el número 3 en el display
            __delay_ms(1000); // Espere 1 segundo
            
            PORTAbits.RA0 = 0; // Apague la LED ubicada en el pin A0
            PORTAbits.RA1 = 1; // Prenda la LED ubicada en el pin A1
            PORTD = seg[2]; // Muestre el número 2 en el display
            __delay_ms(1000); // Espere 1 segundo
            
            PORTAbits.RA1 = 0; // Apague la LED ubicada en el pin A1
            PORTAbits.RA2 = 1; // Prenda la LED ubicada en el pin A2
            PORTD = seg[1]; // Muestre el número 1 en el display
            __delay_ms(1000); // Espere 1 segundo
            
            PORTAbits.RA2 = 0; // Apague la LED ubicada en el pin A2
            PORTD = seg[0]; // Muestre el número 0 en el display
           __delay_ms(500); // Espere 500 ms
           PORTD = 0; // Apague el Display
    
        }else{
            PORTAbits.RA0 = 0;
        }  
    }
    return;
}


//********************************************************************************************************
//Función de Inicialización de Puertos
//********************************************************************************************************

void init (void){
    TRISAbits.TRISA0 = 0; // PIN A0 de PORTA configurado como salida
    TRISAbits.TRISA1 = 0; // PIN A1 de PORTA configurado como salida
    TRISAbits.TRISA2 = 0; // PIN A2 de PORTA configurado como salida
    TRISAbits.TRISA6 = 1; // PIN A6 de PORTA configurado como entrdad
    TRISD = 0; // PORTD configurado como salida
    ANSEL = 0; // Pines connfigurados como entradas digitales
    ANSELH = 0; // Pines connfigurados como entradas digitales

}
